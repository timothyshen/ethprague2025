{
  "address": "0x9C5Ad9F21165a9A6aFA588C24Ed7292902987CbE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_anyStakeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "ComposedMessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "ConfirmationSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATION_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATION_WITHDRAW",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anyStakeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oApp",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lzCompose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "name": "manualSendConfirmation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyStakeContract",
          "type": "address"
        }
      ],
      "name": "setAnyStakeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdae041cace5895665bc30285e1befafc52d989d448c285d5108b3bed37338e01",
  "receipt": {
    "to": "0x9C5Ad9F21165a9A6aFA588C24Ed7292902987CbE",
    "from": "0xcC2042a7c7997a04e26389B9689f2AE766342732",
    "contractAddress": "0x9C5Ad9F21165a9A6aFA588C24Ed7292902987CbE",
    "transactionIndex": 2,
    "gasUsed": "715026",
    "logsBloom": "0x
    "blockHash": "0xdef9d127e0ff23be711fbd3edc4715d78ac9070c2b68e487e8fe778713cd7977",
    "transactionHash": "0xdae041cace5895665bc30285e1befafc52d989d448c285d5108b3bed37338e01",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20336726,
        "transactionHash": "0xdae041cace5895665bc30285e1befafc52d989d448c285d5108b3bed37338e01",
        "address": "0x9C5Ad9F21165a9A6aFA588C24Ed7292902987CbE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc2042a7c7997a04e26389b9689f2ae766342732"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdef9d127e0ff23be711fbd3edc4715d78ac9070c2b68e487e8fe778713cd7977"
      }
    ],
    "blockNumber": 20336726,
    "cumulativeGasUsed": "715026",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbD672D1562Dd32C23B563C989d8140122483631d",
    "0x3ea06d7b5FE23615d39F8D8D63eDB6D717eb9a8A",
    "0xcC2042a7c7997a04e26389B9689f2AE766342732"
  ],
  "numDeployments": 1,
  "solcInputHash": "a4acd00cf06d0b01ccf946e24a43073a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_anyStakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"ComposedMessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ConfirmationSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATION_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATION_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyStakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oApp\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"manualSendConfirmation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyStakeContract\",\"type\":\"address\"}],\"name\":\"setAnyStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Calls AnyStake.send() to send confirmations back to source chain\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"details\":\"Simplified for hackathon - assumes all operations are successful\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StakeAggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getContractBalance()\":{\"notice\":\"Get the contract's ETH balance\"},\"getStakedAmount(address)\":{\"notice\":\"Get the staked amount for a specific user\"},\"getTotalStakedAmount()\":{\"notice\":\"Get the total staked amount across all users\"},\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"notice\":\"Implements ILayerZeroComposer to receive composed messages from LayerZero\"},\"manualSendConfirmation(address,uint256,uint32,bool)\":{\"notice\":\"Manual function to send confirmation (for testing/emergency)\"},\"setAnyStakeContract(address)\":{\"notice\":\"Set the AnyStake contract address\"},\"stake()\":{\"notice\":\"Stake ETH locally (non-LayerZero)\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw a specific amount locally\"}},\"notice\":\"Simplified staking contract for hackathon - only implements ILayerZeroComposer\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeAggregator.sol\":\"StakeAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ILayerZeroComposer\\n */\\ninterface ILayerZeroComposer {\\n    /**\\n     * @notice Composes a LayerZero message from an OApp.\\n     * @dev To ensure non-reentrancy, implementers of this interface MUST assert msg.sender is the corresponding EndpointV2 contract (i.e., onlyEndpointV2).\\n     * @param _from The address initiating the composition, typically the OApp where the lzReceive was called.\\n     * @param _guid The unique identifier for the corresponding LayerZero src/dst tx.\\n     * @param _message The composed message payload in bytes. NOT necessarily the same payload passed via lzReceive.\\n     * @param _executor The address of the executor for the composed message.\\n     * @param _extraData Additional arbitrary data in bytes passed by the entity who executes the lzCompose.\\n     */\\n    function lzCompose(\\n        address _from,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xfaca7205d4211ee9208a7e59171e2301731f3d2a20c49b4a839821871f5fdd49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/StakeAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { ILayerZeroComposer } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interface for calling AnyStake's send function\\ninterface IAnyStake {\\n    function send(\\n        uint32 _dstEid,\\n        address _user,\\n        uint256 _amount,\\n        bool _success\\n    ) external payable;\\n    \\n    function getSendQuote(\\n        uint32 _dstEid,\\n        address _user,\\n        uint256 _amount,\\n        bool _success\\n    ) external view returns (uint256);\\n}\\n\\n/**\\n * @title StakeAggregator\\n * @notice Simplified staking contract for hackathon - only implements ILayerZeroComposer\\n * @dev Calls AnyStake.send() to send confirmations back to source chain\\n */\\ncontract StakeAggregator is ILayerZeroComposer, Ownable {\\n\\n    address public endpoint;\\n    address public anyStakeContract;\\n    \\n    mapping(address => uint256) public stakedAmount;\\n    uint256 public totalStaked;\\n\\n    // Operation types (must match AnyStake.sol)\\n    uint8 public constant OPERATION_DEPOSIT = 1;\\n    uint8 public constant OPERATION_WITHDRAW = 2;\\n\\n    event Deposited(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event ComposedMessageReceived(address indexed user, uint256 amount, bytes32 guid, uint8 operation);\\n    event ConfirmationSent(address indexed user, uint256 amount, uint32 srcEid, bool success);\\n\\n    constructor(address _endpoint, address _anyStakeContract, address _delegate) Ownable(_delegate) {\\n        endpoint = _endpoint;\\n        anyStakeContract = _anyStakeContract;\\n    }\\n\\n    /**\\n     * @notice Set the AnyStake contract address\\n     */\\n    function setAnyStakeContract(address _anyStakeContract) external onlyOwner {\\n        anyStakeContract = _anyStakeContract;\\n    }\\n\\n    /**\\n     * @notice Implements ILayerZeroComposer to receive composed messages from LayerZero\\n     * @dev Simplified for hackathon - assumes all operations are successful\\n     */\\n    function lzCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) external payable override {\\n        require(_oApp == anyStakeContract, \\\"!oApp\\\");\\n        require(msg.sender == endpoint, \\\"!endpoint\\\");\\n\\n        (uint8 _operation, uint256 _amount, address _user, uint32 _srcEid, bytes32 _originalGuid) = \\n            abi.decode(_message, (uint8, uint256, address, uint32, bytes32));\\n        \\n        if (_operation == OPERATION_DEPOSIT) {\\n            // Perform staking\\n            stakedAmount[_user] += _amount;\\n            totalStaked += _amount;\\n            emit Deposited(_user, _amount);\\n            \\n        } else if (_operation == OPERATION_WITHDRAW) {\\n            // Perform withdrawal - simplified to always succeed for hackathon\\n            stakedAmount[_user] -= _amount;\\n            totalStaked -= _amount;\\n            emit Withdrawn(_user, _amount);\\n            \\n            // Send confirmation back to source via AnyStake.send()\\n            _sendConfirmationViaAnyStake(_user, _amount, _srcEid, true);\\n        }\\n        \\n        emit ComposedMessageReceived(_user, _amount, _guid, _operation);\\n    }\\n\\n    /**\\n     * @notice Send confirmation back to source chain via AnyStake contract\\n     * @dev Simplified for hackathon - calls AnyStake.send() directly\\n     */\\n    function _sendConfirmationViaAnyStake(\\n        address _user,\\n        uint256 _amount,\\n        uint32 _srcEid,\\n        bool _success\\n    ) internal {\\n        require(anyStakeContract != address(0), \\\"AnyStake contract not set\\\");\\n        \\n        // For hackathon simplicity, assume we have enough ETH for gas fees\\n        // In production, you'd want proper gas fee management\\n        try IAnyStake(anyStakeContract).send{value: msg.value}(\\n            _srcEid,\\n            _user,\\n            _amount,\\n            _success\\n        ) {\\n            emit ConfirmationSent(_user, _amount, _srcEid, _success);\\n        } catch {\\n            // For hackathon, just emit event if sending fails\\n            emit ConfirmationSent(_user, _amount, _srcEid, false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake ETH locally (non-LayerZero)\\n     */\\n    function stake() external payable {\\n        require(msg.value > 0, \\\"Must stake a positive amount\\\");\\n        \\n        stakedAmount[msg.sender] += msg.value;\\n        totalStaked += msg.value;\\n        \\n        emit Deposited(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraw a specific amount locally\\n     */\\n    function withdraw(uint256 amount) external {\\n        require(stakedAmount[msg.sender] >= amount, \\\"Insufficient staked amount\\\");\\n        require(address(this).balance >= amount, \\\"Insufficient contract balance\\\");\\n        \\n        stakedAmount[msg.sender] -= amount;\\n        totalStaked -= amount;\\n        \\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        \\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Get the staked amount for a specific user\\n     */\\n    function getStakedAmount(address user) external view returns (uint256) {\\n        return stakedAmount[user];\\n    }   \\n\\n    /**\\n     * @notice Get the total staked amount across all users\\n     */\\n    function getTotalStakedAmount() external view returns (uint256) {\\n        return totalStaked;\\n    }\\n\\n    /**\\n     * @notice Get the contract's ETH balance\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @notice Manual function to send confirmation (for testing/emergency)\\n     */\\n    function manualSendConfirmation(\\n        address _user,\\n        uint256 _amount,\\n        uint32 _srcEid,\\n        bool _success\\n    ) external payable onlyOwner {\\n        _sendConfirmationViaAnyStake(_user, _amount, _srcEid, _success);\\n    }\\n\\n    /**\\n     * @notice Allow the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x7b2d27294455c8cf012869020725b60b9370003c32b6dceb4692ef1c28070b5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e34380380610e3483398101604081905261002f91610106565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161009a565b5050600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610149565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461010157600080fd5b919050565b60008060006060848603121561011b57600080fd5b610124846100ea565b9250610132602085016100ea565b9150610140604085016100ea565b90509250925092565b610cdc806101586000396000f3fe6080604052600436106101025760003560e01c8063715018a611610095578063954308db11610064578063954308db14610279578063d0a10260146102a0578063dd047f1d146102b3578063f2fde38b146102c8578063f9931855146102e857600080fd5b8063715018a6146102105780637d3ae20d14610225578063817b1cd2146102455780638da5cb5b1461025b57600080fd5b80634da6a556116100d15780634da6a5561461016f57806359086c11146101a55780635e280f11146101dd5780636f9fb98a146101fd57600080fd5b80630856123e1461010e5780632e1a7d4d1461012357806338adb6f0146101435780633a4b66f11461016757600080fd5b3661010957005b600080fd5b61012161011c366004610a88565b610315565b005b34801561012f57600080fd5b5061012161013e366004610ade565b61032f565b34801561014f57600080fd5b506004545b6040519081526020015b60405180910390f35b6101216104e7565b34801561017b57600080fd5b5061015461018a366004610af7565b6001600160a01b031660009081526003602052604090205490565b3480156101b157600080fd5b506002546101c5906001600160a01b031681565b6040516001600160a01b03909116815260200161015e565b3480156101e957600080fd5b506001546101c5906001600160a01b031681565b34801561020957600080fd5b5047610154565b34801561021c57600080fd5b506101216105ab565b34801561023157600080fd5b50610121610240366004610af7565b6105bf565b34801561025157600080fd5b5061015460045481565b34801561026757600080fd5b506000546001600160a01b03166101c5565b34801561028557600080fd5b5061028e600281565b60405160ff909116815260200161015e565b6101216102ae366004610b64565b6105e9565b3480156102bf57600080fd5b5061028e600181565b3480156102d457600080fd5b506101216102e3366004610af7565b610820565b3480156102f457600080fd5b50610154610303366004610af7565b60036020526000908152604090205481565b61031d61085e565b6103298484848461088b565b50505050565b336000908152600360205260409020548111156103935760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207374616b656420616d6f756e7400000000000060448201526064015b60405180910390fd5b804710156103e35760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640161038a565b3360009081526003602052604081208054839290610402908490610c1b565b92505081905550806004600082825461041b9190610c1b565b9091555050604051600090339083908381818185875af1925050503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b50509050806104ae5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640161038a565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b600034116105375760405162461bcd60e51b815260206004820152601c60248201527f4d757374207374616b65206120706f73697469766520616d6f756e7400000000604482015260640161038a565b3360009081526003602052604081208054349290610556908490610c34565b92505081905550346004600082825461056f9190610c34565b909155505060405134815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a2565b6105b361085e565b6105bd6000610a0a565b565b6105c761085e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0388811691161461062e5760405162461bcd60e51b81526020600482015260056024820152640216f4170760dc1b604482015260640161038a565b6001546001600160a01b031633146106745760405162461bcd60e51b815260206004820152600960248201526808595b991c1bda5b9d60ba1b604482015260640161038a565b600080808080610686898b018b610c47565b94509450945094509450600160ff168560ff1603610727576001600160a01b038316600090815260036020526040812080548692906106c6908490610c34565b9250508190555083600460008282546106df9190610c34565b90915550506040518481526001600160a01b038416907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26107c4565b60011960ff8616016107c4576001600160a01b0383166000908152600360205260408120805486929061075b908490610c1b565b9250508190555083600460008282546107749190610c1b565b90915550506040518481526001600160a01b038416907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a26107c4838584600161088b565b60408051858152602081018d905260ff87168183015290516001600160a01b038516917fffbb8a617f506b4f5f2fcb30cc4e50cb54f08594222fb68db2ccc99c3f8ab606919081900360600190a2505050505050505050505050565b61082861085e565b6001600160a01b03811661085257604051631e4fbdf760e01b81526000600482015260240161038a565b61085b81610a0a565b50565b6000546001600160a01b031633146105bd5760405163118cdaa760e01b815233600482015260240161038a565b6002546001600160a01b03166108e35760405162461bcd60e51b815260206004820152601960248201527f416e795374616b6520636f6e7472616374206e6f742073657400000000000000604482015260640161038a565b6002546040516375a2aa1760e01b815263ffffffff841660048201526001600160a01b038681166024830152604482018690528315156064830152909116906375a2aa179034906084016000604051808303818588803b15801561094657600080fd5b505af193505050508015610958575060015b6109b2576040805184815263ffffffff8416602082015260008183015290516001600160a01b038616917f59fdeb372bfda2e63878b66fe2db79cf1ab614230576d52664e1e23588adef09919081900360600190a2610329565b6040805184815263ffffffff841660208201528215158183015290516001600160a01b038616917f59fdeb372bfda2e63878b66fe2db79cf1ab614230576d52664e1e23588adef09919081900360600190a250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461085b57600080fd5b803563ffffffff81168114610a8357600080fd5b919050565b60008060008060808587031215610a9e57600080fd5b8435610aa981610a5a565b935060208501359250610abe60408601610a6f565b915060608501358015158114610ad357600080fd5b939692955090935050565b600060208284031215610af057600080fd5b5035919050565b600060208284031215610b0957600080fd5b8135610b1481610a5a565b9392505050565b60008083601f840112610b2d57600080fd5b50813567ffffffffffffffff811115610b4557600080fd5b602083019150836020828501011115610b5d57600080fd5b9250929050565b600080600080600080600060a0888a031215610b7f57600080fd5b8735610b8a81610a5a565b965060208801359550604088013567ffffffffffffffff80821115610bae57600080fd5b610bba8b838c01610b1b565b909750955060608a01359150610bcf82610a5a565b90935060808901359080821115610be557600080fd5b50610bf28a828b01610b1b565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2e57610c2e610c05565b92915050565b80820180821115610c2e57610c2e610c05565b600080600080600060a08688031215610c5f57600080fd5b853560ff81168114610c7057600080fd5b9450602086013593506040860135610c8781610a5a565b9250610c9560608701610a6f565b94979396509194608001359291505056fea2646970667358221220a63d320d2eb8e773fb6c46294f7946678b2cd7b8fa39b92409b8fa6b21e960dd64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c8063715018a611610095578063954308db11610064578063954308db14610279578063d0a10260146102a0578063dd047f1d146102b3578063f2fde38b146102c8578063f9931855146102e857600080fd5b8063715018a6146102105780637d3ae20d14610225578063817b1cd2146102455780638da5cb5b1461025b57600080fd5b80634da6a556116100d15780634da6a5561461016f57806359086c11146101a55780635e280f11146101dd5780636f9fb98a146101fd57600080fd5b80630856123e1461010e5780632e1a7d4d1461012357806338adb6f0146101435780633a4b66f11461016757600080fd5b3661010957005b600080fd5b61012161011c366004610a88565b610315565b005b34801561012f57600080fd5b5061012161013e366004610ade565b61032f565b34801561014f57600080fd5b506004545b6040519081526020015b60405180910390f35b6101216104e7565b34801561017b57600080fd5b5061015461018a366004610af7565b6001600160a01b031660009081526003602052604090205490565b3480156101b157600080fd5b506002546101c5906001600160a01b031681565b6040516001600160a01b03909116815260200161015e565b3480156101e957600080fd5b506001546101c5906001600160a01b031681565b34801561020957600080fd5b5047610154565b34801561021c57600080fd5b506101216105ab565b34801561023157600080fd5b50610121610240366004610af7565b6105bf565b34801561025157600080fd5b5061015460045481565b34801561026757600080fd5b506000546001600160a01b03166101c5565b34801561028557600080fd5b5061028e600281565b60405160ff909116815260200161015e565b6101216102ae366004610b64565b6105e9565b3480156102bf57600080fd5b5061028e600181565b3480156102d457600080fd5b506101216102e3366004610af7565b610820565b3480156102f457600080fd5b50610154610303366004610af7565b60036020526000908152604090205481565b61031d61085e565b6103298484848461088b565b50505050565b336000908152600360205260409020548111156103935760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74207374616b656420616d6f756e7400000000000060448201526064015b60405180910390fd5b804710156103e35760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640161038a565b3360009081526003602052604081208054839290610402908490610c1b565b92505081905550806004600082825461041b9190610c1b565b9091555050604051600090339083908381818185875af1925050503d8060008114610462576040519150601f19603f3d011682016040523d82523d6000602084013e610467565b606091505b50509050806104ae5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640161038a565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b600034116105375760405162461bcd60e51b815260206004820152601c60248201527f4d757374207374616b65206120706f73697469766520616d6f756e7400000000604482015260640161038a565b3360009081526003602052604081208054349290610556908490610c34565b92505081905550346004600082825461056f9190610c34565b909155505060405134815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a2565b6105b361085e565b6105bd6000610a0a565b565b6105c761085e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0388811691161461062e5760405162461bcd60e51b81526020600482015260056024820152640216f4170760dc1b604482015260640161038a565b6001546001600160a01b031633146106745760405162461bcd60e51b815260206004820152600960248201526808595b991c1bda5b9d60ba1b604482015260640161038a565b600080808080610686898b018b610c47565b94509450945094509450600160ff168560ff1603610727576001600160a01b038316600090815260036020526040812080548692906106c6908490610c34565b9250508190555083600460008282546106df9190610c34565b90915550506040518481526001600160a01b038416907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26107c4565b60011960ff8616016107c4576001600160a01b0383166000908152600360205260408120805486929061075b908490610c1b565b9250508190555083600460008282546107749190610c1b565b90915550506040518481526001600160a01b038416907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a26107c4838584600161088b565b60408051858152602081018d905260ff87168183015290516001600160a01b038516917fffbb8a617f506b4f5f2fcb30cc4e50cb54f08594222fb68db2ccc99c3f8ab606919081900360600190a2505050505050505050505050565b61082861085e565b6001600160a01b03811661085257604051631e4fbdf760e01b81526000600482015260240161038a565b61085b81610a0a565b50565b6000546001600160a01b031633146105bd5760405163118cdaa760e01b815233600482015260240161038a565b6002546001600160a01b03166108e35760405162461bcd60e51b815260206004820152601960248201527f416e795374616b6520636f6e7472616374206e6f742073657400000000000000604482015260640161038a565b6002546040516375a2aa1760e01b815263ffffffff841660048201526001600160a01b038681166024830152604482018690528315156064830152909116906375a2aa179034906084016000604051808303818588803b15801561094657600080fd5b505af193505050508015610958575060015b6109b2576040805184815263ffffffff8416602082015260008183015290516001600160a01b038616917f59fdeb372bfda2e63878b66fe2db79cf1ab614230576d52664e1e23588adef09919081900360600190a2610329565b6040805184815263ffffffff841660208201528215158183015290516001600160a01b038616917f59fdeb372bfda2e63878b66fe2db79cf1ab614230576d52664e1e23588adef09919081900360600190a250505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461085b57600080fd5b803563ffffffff81168114610a8357600080fd5b919050565b60008060008060808587031215610a9e57600080fd5b8435610aa981610a5a565b935060208501359250610abe60408601610a6f565b915060608501358015158114610ad357600080fd5b939692955090935050565b600060208284031215610af057600080fd5b5035919050565b600060208284031215610b0957600080fd5b8135610b1481610a5a565b9392505050565b60008083601f840112610b2d57600080fd5b50813567ffffffffffffffff811115610b4557600080fd5b602083019150836020828501011115610b5d57600080fd5b9250929050565b600080600080600080600060a0888a031215610b7f57600080fd5b8735610b8a81610a5a565b965060208801359550604088013567ffffffffffffffff80821115610bae57600080fd5b610bba8b838c01610b1b565b909750955060608a01359150610bcf82610a5a565b90935060808901359080821115610be557600080fd5b50610bf28a828b01610b1b565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2e57610c2e610c05565b92915050565b80820180821115610c2e57610c2e610c05565b600080600080600060a08688031215610c5f57600080fd5b853560ff81168114610c7057600080fd5b9450602086013593506040860135610c8781610a5a565b9250610c9560608701610a6f565b94979396509194608001359291505056fea2646970667358221220a63d320d2eb8e773fb6c46294f7946678b2cd7b8fa39b92409b8fa6b21e960dd64736f6c63430008160033",
  "devdoc": {
    "details": "Calls AnyStake.send() to send confirmations back to source chain",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "lzCompose(address,bytes32,bytes,address,bytes)": {
        "details": "Simplified for hackathon - assumes all operations are successful"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StakeAggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getContractBalance()": {
        "notice": "Get the contract's ETH balance"
      },
      "getStakedAmount(address)": {
        "notice": "Get the staked amount for a specific user"
      },
      "getTotalStakedAmount()": {
        "notice": "Get the total staked amount across all users"
      },
      "lzCompose(address,bytes32,bytes,address,bytes)": {
        "notice": "Implements ILayerZeroComposer to receive composed messages from LayerZero"
      },
      "manualSendConfirmation(address,uint256,uint32,bool)": {
        "notice": "Manual function to send confirmation (for testing/emergency)"
      },
      "setAnyStakeContract(address)": {
        "notice": "Set the AnyStake contract address"
      },
      "stake()": {
        "notice": "Stake ETH locally (non-LayerZero)"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw a specific amount locally"
      }
    },
    "notice": "Simplified staking contract for hackathon - only implements ILayerZeroComposer",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1551,
        "contract": "contracts/StakeAggregator.sol:StakeAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3279,
        "contract": "contracts/StakeAggregator.sol:StakeAggregator",
        "label": "endpoint",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3281,
        "contract": "contracts/StakeAggregator.sol:StakeAggregator",
        "label": "anyStakeContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3285,
        "contract": "contracts/StakeAggregator.sol:StakeAggregator",
        "label": "stakedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3287,
        "contract": "contracts/StakeAggregator.sol:StakeAggregator",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}